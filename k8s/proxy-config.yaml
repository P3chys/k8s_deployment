apiVersion: v1
kind: ConfigMap
metadata:
  name: router-config
data:
  default.conf: |-
    server {
    listen 80;
    
    resolver kube-dns.kube-system.svc.cluster.local;
    
    location /api/public/ {
        proxy_pass http://backend-physical.default.svc.cluster.local;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # Add debug header to confirm routing
        add_header X-Debug-Backend "backend-physical" always;
    }

    # Machine user endpoints
    location /api/machine/ {
        proxy_pass http://backend-machine.default.svc.cluster.local;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        add_header X-Debug-Backend "backend-machine" always;
    }
    
    # Physical user endpoints
    location /api/physical/ {
        proxy_pass http://backend-physical.default.svc.cluster.local;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        add_header X-Debug-Backend "backend-physical" always;
    }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: router
spec:
  replicas: 1
  selector:
    matchLabels:
      app: router
  template:
    metadata:
      labels:
        app: router
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: router-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
      volumes:
      - name: router-config
        configMap:
          name: router-config
---
apiVersion: v1
kind: Service
metadata:
  name: router-service
spec:
  selector:
    app: router
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer